# -*- coding: utf-8 -*-
"""Test lab 02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_wYfEdxh7ROfBoAAErav6r0Kfh3NnFY5
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder


# Initialize LabelEncoder
label_encoder = LabelEncoder()


# Step 1: Load the dataset from the URL
url = "Dry_Bean_Dataset.xlsx"
#column_names = ['Area', 'Perimeter', 'MajorAxisLength', 'AspectRation', 'Eccentricity','ConvexArea', 'EquivDiameter', 'Extent', 'Solidity', 'roundness', 'Compactness','ShapeFactor1', 'ShapeFactor2', 'ShapeFactor3', 'ShapeFactor4', 'Class']
dataset = pd.read_excel(url)

X = dataset.iloc[:,0:-1]

Y = dataset.iloc[:,-1]
print(np.shape(X))
print(np.shape(Y))

NumDataPerClass = np.shape(X)[0]

rIndex = np.random.permutation(NumDataPerClass)
Xr = X.iloc[rIndex,]
yr = Y.iloc[rIndex]


# Training and test sets (half half)
#

X_train = np.array(Xr[0:NumDataPerClass//2])
y_train = np.array(yr[0:NumDataPerClass//2])

X_test = np.array(Xr[NumDataPerClass//2:NumDataPerClass])
y_test = np.array(yr[NumDataPerClass//2:NumDataPerClass])


print("Shape of training data (X_train):", X_train.shape)
print("Shape of training labels (y_train):", y_train.shape)
print("Shape of testing data (X_test):", X_test.shape)
print("Shape of testing labels (y_test):", y_test.shape)

Ntrain = NumDataPerClass//2;
Ntest = NumDataPerClass//2;

# Define PercentCorrect function
def PercentCorrect(Inputs, targets, weights):
  N = len(targets)
  nCorrect = 0
  for n in range(N):
    OneInput = Inputs[n,:]
    if (targets[n] * np.dot(OneInput, weights) > 0):
      nCorrect +=1
  return 100*nCorrect/N

w = np.random.randn(16)

print("Randomly generated weight vector (w):", w)
print("Initial Percentage Correct: %6.2f" %(PercentCorrect(X_train, y_train, w)))


MaxIter = 1000
alpha = 0.000000008

P_train = np.zeros(MaxIter)
P_test = np.zeros(MaxIter)


for iter in range(MaxIter):
    r = np.floor(np.random.rand() * Ntrain).astype(int)

    x = X_train[r,:]  # Access the row corresponding to the randomly generated index

    if (y_train[r]*np.dot(x,w)<0):
        w += alpha * y_train[r] * x

    P_train[iter] = PercentCorrect(X_train, y_train, w)
    P_test[iter] = PercentCorrect(X_test, y_test, w)
    #print(w[0])


print("Percentage Correct After Training: %6.2f %6.2f"%(PercentCorrect(X_train, y_train, w), PercentCorrect(X_test, y_test, w)))

import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(6,4))
ax.plot(range(MaxIter), P_train, 'b', label = "Training")
ax.plot(range(MaxIter), P_test, 'r', label = "Test")
ax.grid(True)
ax.legend()
ax.set_title('Perceptron Learning')
ax.set_ylabel('Training and Test Accuracies', fontsize=14)
ax.set_xlabel('Iteration', fontsize=14)
plt.savefig('learningCurves.png')